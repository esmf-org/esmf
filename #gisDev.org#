#+TODO: TODO IN-PROGRESS ISSUES BETA WAITING DONE

* From Bob - 3/15/23
** Basics
I’ve added a new unit test in the file: 
   <ESMF_DIR>/src/Infrastructure/Mesh/tests/ESMF_MeshFileIOUTest.F90  
This test is called test_create_mesh_from_SH_file() and all it does is call mesh create from file 
with the new flag ESMF_FILEFORMAT_SHAPEFILE this calls down through the layers to the new 
subroutine ESMCI_mesh_create_from_SHAPEFILE_file() in the file 
   <ESMF_DIR>/src/Infrastructure/Mesh/src/ESMCI_Mesh_FileIO.C 
this is a good place to add the high level implementation of the mesh create code. You can see 
analogous code in 
   ESMCI_mesh_create_from_ESMFMesh_file() 
in the same file. I also added a place to put the shapefile specific calls in the file 
   ESMCI_SHAPEFILE_Util.C 
in the same directory. I added an example subroutine: 
   get_example_from_SHAPEFILE_file() 
in there, just to make sure that all the compiling works. Feel free to get rid of that. 

** Enviroment 
  In order for ESMF to be built with the shapefile library I also added the environment variables 
to the ESMF build: 
   ESMF_SHAPEFILE
   ESMF_SHAPEFILE_INCLUDE
   ESMF_SHAPEFILE_LIBPATH
   ESMF_SHAPEFILE_LIBS

I didn’t know anything about the library for the shapefile stuff so you will need to fill them in:
   - ESMF_SHAPEFILE just needs to be defined to something (e.g. ON)
   - ESMF_SHAPEFILE_LIBS is the name of the library e.g. -lshapelib ???
   - ESMF_SHAPEFILE_INCLUDE is the path to the shapefile include file
   - ESMF_SHAPEFILE_LIBPATH is the path to the shapfile library 

** shplib
I didn’t have the shapefile library built, so this might take a bit of experimenting, but it should 
be approximately correct. Making sure it works is probably a good place to start. 
   Along these lines I didn’t know the name of the include file, so that’ll have to be changed 
around line 52 of ESMCI_SHAPEFILE_Util.C and line 40 of 
   <ESMF_DIR>/src/Infrastructure/Mesh/include/ESMCI_SHAPEFILE_Util.h 
(in the place where it says #include<pio.h> replace pio.h with the shapefile one)

** Where to add new code/modules
If you have more code that you want to add (or that you’ve added already) that you don’t think will 
fit in ESMCI_SHAPEFILE_Util.C, then we can add a new directory in 
   <ESMF_DIR>/src/Infrastructure/IO 
(e.g. <ESMF_DIR>/src/Infrastructure/IO/SHAPEFILE )

** Unit test
The new unit test I added for this references the file data/test_shape.shp, this file doesn’t exist. 
You can change that name and add a new small test file into 
   <ESMF_DIR>/src/Infrastructure/Mesh/tests/data . 
If in the test directory (<ESMF_DIR>/src/Infrastructure/Mesh/tests) you do: 
   $ make RUN_ESMF_MeshFileIOUTestUNI 
it will copy the data and run all the tests in the file ESMF_MeshFileIOUTest.F90  The test will be 
run and the results will appear in the directory: 
   <ESMF_DIR>/test/*/*  
Once you’ve done it once via the makefile you can then run the tests in that directory just by 
doing mpirun -np 1 ./ESMF_MeshFileIOUTest

** Fin
I know that’s a lot of information, so feel free to ask lots of questions. I think once we get things 
moving it shouldn’t be hard to bring this capability in, but there might be some back and forth at 
the beginning just to get both of us on the same page. 

* Structure & Flow
  openfile
  get_elementconn_from...
  get_nodecount_from...
  get_coords_from...
  
* Questions:
** What about CRS and projection to/from GEOS? 
Will area (spatial extent) be conserved? e.g. if the GIS CRS is curvilinear, is the mapping in ESMF able to handle that?
i.e. is ESMF mapping only planar?
*** Solution: add a transformation routine from->to. e.g. from ESMF planar to GIS curvilear, or vice versa
