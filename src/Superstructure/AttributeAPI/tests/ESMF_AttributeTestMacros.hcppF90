^if 0
! $Id$
!
! Earth System Modeling Framework
! Copyright (c) 2002-2025, University Corporation for Atmospheric Research,
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics
! Laboratory, University of Michigan, National Centers for Environmental
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory,
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
!
^endif

^if 0
!------------------------------------------------------------------------------
! Macros for Attribute testing
!
! The structure of this file and these macros are compatible with the gcc
! preprocessor - they assume the use of ## as a paste operator, require that
! no additional spaces be added (e.g. no pre-tokenization as done by some
! preprocessors which assume C syntax), assume an option exists to suppress
! C-specific syntax directives such as #line or #pragma, and that an option
! exists to produce output on stdout and not into a file.  The output of
! the preprocessor phase is a valid .F90 file ready to be compiled by the
! standard fortran compiler.  (gcc is *not* used for compilation.)
!
! The macros are intended to be written with @\ at the end of each line of
! a multiline macro, and the output piped thru 'tr' to translate each
! @ into <cr> to produce multiple lines of fortran code from a single
! macro invocation.   If any preprocessor directives are to be left in the
! output file (e.g. #include ""), the source should use ^directive (e.g.
! ^include "header.h" ) again using 'tr' to substitute # for ^ after
! preprocessing is completed.  
!------------------------------------------------------------------------------
^endif

! variable declarations
#define AttributeTestVariablesMacro() \
      character(ESMF_MAXSTR)                :: attrname, attrnameOut, attrvalue @\
      integer                               :: rc, count, items @\
      type(ESMF_TypeKind_Flag)              :: attrTK @\
 @\
      character(3*ESMF_MAXSTR)              :: inASCII, outASCII @\
      logical                               :: correct @\
      integer                               :: i @\
 @\
      real(ESMF_KIND_R8), dimension(3)      :: inR8l, defaultR8l, & @\
                                               dfltoutR8l, outR8l @\
      character(ESMF_MAXSTR)                :: inChar, outChar, & @\
                                               defaultChar, dfltoutChar @\
      real(ESMF_KIND_R8)                    :: inR8, outR8,& @\
                                               defaultR8, dfltoutR8 @\
      real(ESMF_KIND_R8), dimension(4)      :: defaultR8lWrong @\
   @\
      ! non exhaustive constant value variables @\
      real(ESMF_KIND_R8)                    :: outConstantR8 @\
      real(ESMF_KIND_R8), dimension(3)      :: outConstantR8l @\
      character(ESMF_MAXSTR)                :: outConstantChar @\
      character(ESMF_MAXSTR), dimension(3)  :: outConstantCharl @\
 @\
      logical                               :: isPresent @\
      character(len=ESMF_MAXSTR)            :: logmsg @\
 @\
^ifdef ESMF_TESTEXHAUSTIVE @\
 @\
      integer                :: itemCount @\
 @\
      integer(ESMF_KIND_I4)                 :: inI4, outI4, & @\
                                               defaultI4, dfltoutI4 @\
      integer(ESMF_KIND_I4), dimension(3)   :: inI4l, outI4l, & @\
                                               defaultI4l, dfltoutI4l @\
      integer(ESMF_KIND_I4), dimension(4)   :: defaultI4lWrong @\
      integer(ESMF_KIND_I4), dimension(10)  :: outI4lLong @\
      integer(ESMF_KIND_I8)                 :: inI8, outI8, & @\
                                               defaultI8, dfltoutI8 @\
      integer(ESMF_KIND_I8), dimension(3)   :: inI8l, outI8l, & @\
                                               defaultI8l, dfltoutI8l @\
      integer(ESMF_KIND_I8), dimension(4)   :: defaultI8lWrong @\
      integer(ESMF_KIND_I8), dimension(10)  :: outI8lLong @\
      real(ESMF_KIND_R4)                    :: inR4, outR4, & @\
                                               defaultR4, dfltoutR4 @\
      real(ESMF_KIND_R4), dimension(3)      :: inR4l, outR4l, & @\
                                               defaultR4l, dfltoutR4l @\
      real(ESMF_KIND_R4), dimension(4)      :: defaultR4lWrong @\
      real(ESMF_KIND_R4), dimension(10)     :: outR4lLong @\
      character(ESMF_MAXSTR)                :: inEmpty, outEmpty @\
      character(ESMF_MAXSTR), dimension(3)  :: inCharl, defaultCharl, & @\
                                               dfltoutCharl, outCharl @\
      character(ESMF_MAXSTR), dimension(4)  :: defaultCharlWrong @\
      character(ESMF_MAXSTR), dimension(10) :: outCharlLong @\
      logical                               :: inLog, outLog, & @\
                                               defaultLog, dfltoutLog @\
      logical, dimension(3)                 :: inLogl, defaultLogl, & @\
                                               dfltoutLogl, outLogl @\
      logical, dimension(4)                 :: defaultLoglWrong @\
      logical, dimension(10)                :: outLoglLong @\
      real(ESMF_KIND_R8), dimension(10)     :: outR8lLong @\
 @\
      ! exhaustive constant value variables @\
      integer(ESMF_KIND_I4)                 :: outConstantI4 @\
      integer(ESMF_KIND_I4), dimension(3)   :: outConstantI4l @\
      integer(ESMF_KIND_I8)                 :: outConstantI8 @\
      integer(ESMF_KIND_I8), dimension(3)   :: outConstantI8l @\
      real(ESMF_KIND_R4)                    :: outConstantR4 @\
      real(ESMF_KIND_R4), dimension(3)      :: outConstantR4l @\
      logical                               :: outConstantLogical @\
      logical, dimension(3)                 :: outConstantLogicall @\
 @\
      character(ESMF_MAXSTR), dimension(3)  :: attpackList, attpackListOut, & @\
                                               attpackListOut2, attpackDfltList, & @\
                                               attpackListOut3, attpackListOut4 @\
 @\
^endif @\
! < end macro - do not edit directly >  @\
!------------------------------------------------------------------------------

! variable declarations
#define AttributeTestVariablesCopyMacro(mname, mobj) \
      type(mobj) :: mname##A, mname##Alias, mname##Hybrid, mname##Value @\
! < end macro - do not edit directly >  @\
!------------------------------------------------------------------------------


! main test body
#define AttributeTestMacro(mname, mobj, mtag_ex, mtag_nex) \
!---------------------------------------------------------------------------- @\
! <This section created by macro - do not edit directly> @\
 @\
^ifdef ESMF_TESTEXHAUSTIVE @\
 @\
      !---------------------------------------------------------------------- @\
      !  Empty value @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Add an empty value character Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="EmptyValue", value="", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an empty value character Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an empty valGridue character from mobj Test @\
      call ESMF_AttributeGet(mname, name="EmptyValue", value=outEmpty, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an empty value character Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(""==outEmpty), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  Empty value from variable @\
      !---------------------------------------------------------------------- @\
      inEmpty = "" @\
      !mtag_ex @\
      ! Add an empty value character to mobj Test @\
      call ESMF_AttributeSet(mname, name="EmptyValue", value=inEmpty, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an empty value character Attribute to mobj Test 2" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an empty value character from mobj Test @\
      call ESMF_AttributeGet(mname, name="EmptyValue", value=outEmpty, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an empty value character Attribute from mobj Test 2" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(inEmpty==outEmpty), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  Long value @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Add a long value character to mobj Test @\
      call ESMF_AttributeSet(mname, name="LongValue", value= & @\
        "This is a really long line & @\
        &that's broken into multiple lines & @\
        &to compile, and it is also a runon & @\
        &sentence, which is bad grammar but a good & @\
        &test of how the Attributes behave with long & @\
        &values, yada yada yada!!!", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a long value character Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  ASCII characters @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Add ASCII characters to an Attribute on an Array Test @\
      correct = .true. @\
      ! NOTE (bekozi): Remove the forward slash / from list of possible keys. This is @\
      ! used by JSON Pointer Syntax and creates nests which break these tests. @\
      inASCII = "!""#$%&'()*+,-.0123456789:;<=>?" @\
      inASCII = ESMF_StringConcat (trim (inASCII), "ABCDEFGHIJKLMNOPQRSTUVWXYZ") @\
      inASCII = ESMF_StringConcat (trim (inASCII), "[\]^_`") @\
      inASCII = ESMF_StringConcat (trim (inASCII), "abcdefghijklmnopqrstuvwxyz") @\
      ! NOTE (bekozi): Remove the tilda ~ from list of possible keys. This is @\
      ! used by JSON Pointer Syntax is not valid without an integer index after. @\
      inASCII = ESMF_StringConcat (trim (inASCII), "{|}") @\
      do i=1,len_trim(inASCII) @\
        call ESMF_AttributeSet(mname, name=inASCII(i:i), value=inASCII, rc=rc) @\
        if (rc /= ESMF_SUCCESS) then @\
            correct = .false. @\
        endif @\
        call ESMF_AttributeGet(mname, name=inASCII(i:i), value=outASCII, rc=rc) @\
        if (rc /= ESMF_SUCCESS) correct = .false. @\
        if (inASCII /= outASCII) correct = .false. @\
      enddo @\
 @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Use all ASCII characters as Attribute names on an Array Test" @\
      call ESMF_Test((correct .eqv. .true.), name, failMsg, result, ESMF_SRCLINE) @\
 @\
      !---------------------------------------------------------------------- @\
      !  Get an Attribute which was not set @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I4 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="NotHere", value=outI4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_RC_ATTR_NOTSET" @\
      write(name, *) "Getting a nonexistent Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_I4 @\
      !---------------------------------------------------------------------- @\
      inI4 = 4 @\
      !mtag_ex @\
      ! Add an ESMF_I4 Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrI4", value=inI4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_I4 Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I4 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4", value=outI4, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and.(inI4==outI4) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name="AttrI4", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing an ESMF_I4 Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name="AttrI4", rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing an ESMF_I4 Attribute on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, & @\
                     ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultI4 = 7 @\
      !mtag_ex @\
      ! Get an ESMF_I4 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4", value=dfltoutI4, & @\
        defaultvalue=defaultI4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a default ESMF_I4 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(defaultI4==dfltoutI4), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I4 Attribute isPresent flag from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4", value=outI4, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4 Attribute isPresent flag from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I4 Attribute error from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4", value=outI4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4 Attribute error from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  Constant value from variable @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Add a constant numerical Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="ConstantI4", value=42, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a constant I4 Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get a constant numerical Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="ConstantI4", value=outConstantI4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a constant I4 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(42==outConstantI4), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_I4 list @\
      !---------------------------------------------------------------------- @\
      inI4l = (/1,2,3/) @\
      !mtag_ex @\
      ! Add an ESMF_I4 list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrI4l", & @\
        valueList=inI4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_I4l Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I4 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4l", & @\
        valueList=outI4l, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4l Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. all (inI4l==outI4l) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name="AttrI4l", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing an ESMF_I4l Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name="AttrI4l", rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing an ESMF_I4l Attribute on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, & @\
                     ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultI4l = (/4,2,7/) @\
      !mtag_ex @\
      ! Get an ESMF_I4 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4l", & @\
        valueList=dfltoutI4l, defaultvalueList=defaultI4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a default ESMF_I4l Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. all (defaultI4l==dfltoutI4l), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultI4lWrong = (/6,7,8,9/) @\
      !mtag_ex @\
      ! Get a I4 list default Attribute on mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4l", & @\
        valueList=dfltOutI4l, defaultvalueList=defaultI4lWrong, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a wrong sized default Attribute I4 list from mobj test" @\
      call ESMF_Test(rc==ESMF_RC_ATTR_ITEMSOFF, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      items = 3 @\
      ! Get an ESMF_I4 list Attribute isPresent flag and itemCount from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4l", & @\
        valueList=outI4l, itemCount=items, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4l Attribute isPresent flag and itemCount from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.) & @\
                     .and.(items == 0), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I4 list Attribute isPresent flag from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4l", & @\
        valueList=outI4l, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4l Attribute isPresent flag from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      items = 3 @\
      ! Get an ESMF_I4 list Attribute itemCount from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4l", & @\
        valueList=outI4l, itemCount=items, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4l Attribute itemCount from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(items == 0), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I4 list Attribute error from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4l", & @\
        valueList=outI4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4l Attribute error from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !---------------------------------------------------------------------- @\
      !  Constant value from variable @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Add a constant numerical Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="ConstantI4l", & @\
        valueList=(/1,2,3/), rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a constant I4 list Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get a constant numerical Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="ConstantI4l", & @\
        valueList=outConstantI4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a constant I4 list Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. all((/1,2,3/)==outConstantI4l), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_I8 @\
      !---------------------------------------------------------------------- @\
      inI8 = 4 @\
      !mtag_ex @\
      ! Add an ESMF_I8 Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrI8", value=inI8, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_I8 Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I8 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8", value=outI8, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and.(inI8==outI8) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name="AttrI8", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing an ESMF_I8 Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name="AttrI8", rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing an ESMF_I8 Attribute on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, & @\
                     ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultI8 = 7 @\
      !mtag_ex @\
      ! Get an ESMF_I8 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8", value=dfltoutI8, & @\
        defaultvalue=defaultI8, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a default ESMF_I8 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(defaultI8==dfltoutI8), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I8 Attribute isPresent flag from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8", value=outI8, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8 Attribute isPresent flag from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I8 Attribute error from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8", value=outI8, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8 Attribute error from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  Constant value from variable @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Add a constant numerical Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="ConstantI8", value=42, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a constant I8 Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_I8 list @\
      !---------------------------------------------------------------------- @\
      inI8l = (/1,2,3/) @\
      !mtag_ex @\
      ! Add an ESMF_I8 list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrI8l", & @\
        valueList=inI8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_I8l Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I8 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8l", & @\
        valueList=outI8l, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8l Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. all (inI8l==outI8l) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name="AttrI8l", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing an ESMF_I8l Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name="AttrI8l", rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing an ESMF_I8l Attribute on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, & @\
                     ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultI8l = (/4,2,7/) @\
      !mtag_ex @\
      ! Get an ESMF_I8 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8l", & @\
        valueList=dfltoutI8l, defaultvalueList=defaultI8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a default ESMF_I8l Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. all (defaultI8l==dfltoutI8l), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultI8lWrong = (/6,7,8,9/) @\
      !mtag_ex @\
      ! Get a I8 list default Attribute on mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8l", & @\
        valueList=dfltOutI8l, defaultvalueList=defaultI8lWrong, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a wrong sized default Attribute I8 list from mobj test" @\
      call ESMF_Test(rc==ESMF_RC_ATTR_ITEMSOFF, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      items = 3 @\
      ! Get an ESMF_I8 list Attribute isPresent flag and itemCount from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8l", & @\
        valueList=outI8l, itemCount=items, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8l Attribute isPresent flag and itemCount from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.) & @\
                     .and.(items == 0), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I8 list Attribute isPresent flag from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8l", & @\
        valueList=outI8l, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8l Attribute isPresent flag from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      items = 3 @\
      ! Get an ESMF_I8 list Attribute itemCount from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8l", & @\
        valueList=outI8l, itemCount=items, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8l Attribute itemCount from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(items == 0), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I8 list Attribute error from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8l", & @\
        valueList=outI8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8l Attribute error from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !---------------------------------------------------------------------- @\
      !  Constant value from variable @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Add a constant numerical Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="ConstantI8l", & @\
        valueList=(/1,2,3/), rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a constant I8 list Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_R4 @\
      !---------------------------------------------------------------------- @\
      inR4 = 4 @\
      !mtag_ex @\
      ! Add an ESMF_R4 Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrR4", value=inR4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_R4 Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_R4 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4", value=outR4, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and.(inR4==outR4) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name="AttrR4", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing an ESMF_R4 Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name="AttrR4", rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing an ESMF_R4 Attribute on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, & @\
                     ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultR4 = 7 @\
      !mtag_ex @\
      ! Get an ESMF_R4 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4", value=dfltoutR4, & @\
        defaultvalue=defaultR4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a default ESMF_R4 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(defaultR4==dfltoutR4), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_R4 Attribute isPresent flag from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4", value=outR4, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4 Attribute isPresent flag from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_R4 Attribute error from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4", value=outR4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4 Attribute error from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  Constant value from variable @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Add a constant numerical Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="ConstantR4", value=4.2, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a constant R4 Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get a constant numerical Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="ConstantR4", value=outConstantR4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a constant R4 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(4.2==outConstantR4), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_R4 list @\
      !---------------------------------------------------------------------- @\
      inR4l = (/1,2,3/) @\
      !mtag_ex @\
      ! Add an ESMF_R4 list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrR4l", & @\
        valueList=inR4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_R4l Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_R4 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4l", & @\
        valueList=outR4l, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4l Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. all (inR4l==outR4l) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name="AttrR4l", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing an ESMF_R4l Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name="AttrR4l", rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing an ESMF_R4l Attribute on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, & @\
                     ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultR4l = (/7,8,9/) @\
      !mtag_ex @\
      ! Get an ESMF_R4 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4l", & @\
        valueList=dfltoutR4l, defaultvalueList=defaultR4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a default ESMF_R4l Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. all (defaultR4l==dfltoutR4l), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultR4lWrong = (/6,7,8,9/) @\
      !mtag_ex @\
      ! Get a R4 list default Attribute on mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4l", & @\
        valueList=dfltOutR4l, defaultvalueList=defaultR4lWrong, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a wrong sized default Attribute R4 list from mobj test" @\
      call ESMF_Test(rc==ESMF_RC_ATTR_ITEMSOFF, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      items = 3 @\
      ! Get an ESMF_R4 list Attribute isPresent flag and itemCount from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4l", & @\
        valueList=outR4l, itemCount=items, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4l Attribute isPresent flag and itemCount from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.) & @\
                     .and.(items == 0), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      ! Get an ESMF_R4 list Attribute isPresent flag from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4l", & @\
        valueList=outR4l, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4l Attribute isPresent flag from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      items = 3 @\
      ! Get an ESMF_R4 list Attribute itemCount from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4l", & @\
        valueList=outR4l, itemCount=items, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4l Attribute itemCount from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(items == 0), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      ! Get an ESMF_R4 list Attribute error from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4l", & @\
        valueList=outR4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4l Attribute error from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !---------------------------------------------------------------------- @\
      !  Constant value from variable @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Add a constant numerical Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="ConstantR4l", & @\
        valueList=(/1.1,2.2,3.3/), rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a constant R4 list Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get a constant numerical Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="ConstantR4l", & @\
        valueList=outConstantR4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a constant R4 list Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. all((/1.1,2.2,3.3/)==outConstantR4l), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
^endif @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_R8 @\
      !---------------------------------------------------------------------- @\
      inR8 = 4 @\
      !mtag_nex @\
      ! Add an ESMF_R8 Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrR8", value=inR8, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_R8 Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Get an ESMF_R8 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8", value=outR8, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and.(inR8==outR8) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name="AttrR8", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing an ESMF_R8 Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Remove an Attribute on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name="AttrR8", rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing an ESMF_R8 Attribute on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, & @\
                     ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultR8 = 7 @\
      !mtag_nex @\
      ! Get an ESMF_R8 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8", value=dfltoutR8, & @\
        defaultvalue=defaultR8, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a default ESMF_R8 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(defaultR8==dfltoutR8), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Get an ESMF_R8 Attribute isPresent flag from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8", value=outR8, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8 Attribute isPresent flag from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Get an ESMF_R8 Attribute error from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8", value=outR8, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8 Attribute error from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  Constant value from variable @\
      !---------------------------------------------------------------------- @\
      !mtag_nex @\
      ! Add a constant numerical Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="ConstantR8", value=4.2, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a constant R8 Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_R8 list @\
      !---------------------------------------------------------------------- @\
      inR8l = (/1,2,3/) @\
      !mtag_nex @\
      ! Add an ESMF_R8 list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrR8l", & @\
        valueList=inR8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_R8l Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Get an ESMF_R8 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8l", & @\
        valueList=outR8l, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8l Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. all (inR8l==outR8l) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name="AttrR8l", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing an ESMF_R8l Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Remove an Attribute on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name="AttrR8l", rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing an ESMF_R8l Attribute on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, & @\
                     ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultR8l = (/7,8,9/) @\
      !mtag_nex @\
      ! Get an ESMF_R8 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8l", & @\
        valueList=dfltoutR8l, defaultvalueList=defaultR8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a default ESMF_R8l Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. all (defaultR8l==dfltoutR8l), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultR8lWrong = (/6,7,8,9/) @\
      !mtag_nex @\
      ! Get a R8 list default Attribute on mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8l", & @\
        valueList=dfltOutR8l, defaultvalueList=defaultR8lWrong, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a wrong sized default Attribute R8 list from mobj test" @\
      call ESMF_Test(rc==ESMF_RC_ATTR_ITEMSOFF, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      items = 3 @\
      ! Get an ESMF_R8 list Attribute isPresent flag and itemCount from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8l", & @\
        valueList=outR8l, itemCount=items, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8l Attribute isPresent flag and itemCount from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.) & @\
                     .and.(items == 0), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_nex @\
      ! Get an ESMF_R8 list Attribute isPresent flag from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8l", & @\
        valueList=outR8l, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8l Attribute isPresent flag from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_nex @\
      items = 3 @\
      ! Get an ESMF_R8 list Attribute itemCount from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8l", & @\
        valueList=outR8l, itemCount=items, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8l Attribute itemCount from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(items == 0), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_nex @\
      ! Get an ESMF_R8 list Attribute error from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8l", & @\
        valueList=outR8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8l Attribute error from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !---------------------------------------------------------------------- @\
      !  Constant value from variable @\
      !---------------------------------------------------------------------- @\
      !mtag_nex @\
      ! Add a constant numerical Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="ConstantR8l", & @\
        valueList=(/1,2,3/), rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a constant R8 list Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  Character @\
      !---------------------------------------------------------------------- @\
      inChar = "charAttribute" @\
      attrName = "char_" @\
      !mtag_nex @\
      ! Add a char Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name=attrname, value=inChar, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a char Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Get a char Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name=attrname, value=outChar, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a char Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. (inChar==outChar) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name=attrname, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing a char Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Remove an Attribute on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name=attrname, rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing a char Attribute on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, & @\
                     ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultChar = "charAttributeDefault" @\
      !mtag_nex @\
      ! Get a default char Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name=attrname, value=dfltoutChar, & @\
        defaultvalue=defaultChar, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a default char Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. (defaultChar==dfltoutChar), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Get a char Attribute isPresent flag from mobj Test @\
      call ESMF_AttributeGet(mname, name=attrname, value=outChar, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a char Attribute isPresent flag from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
      !mtag_nex @\
      ! Get a char Attribute error from mobj Test @\
      call ESMF_AttributeGet(mname, name=attrname, value=outChar, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a char Attribute error from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !---------------------------------------------------------------------- @\
      !  Constant value from variable @\
      !---------------------------------------------------------------------- @\
      !mtag_nex @\
      ! Add a constant character Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="ConstantChar", value="imacharacter", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a constant character Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Get a constant character Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="ConstantChar", value=outConstantChar, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a constant character Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.("imacharacter"==outConstantChar), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
^ifdef ESMF_TESTEXHAUSTIVE @\
 @\
      !---------------------------------------------------------------------- @\
      !  Character list @\
      !---------------------------------------------------------------------- @\
      InCharl(1) = "Character String 1" @\
      InCharl(2) = "Character String 2" @\
      InCharl(3) = "Character String 3" @\
      defaultCharl(1) = "Character String 5" @\
      defaultCharl(2) = "Character String 6" @\
      defaultCharl(3) = "Character String 7" @\
      defaultCharlWrong(1) = "Character String 5" @\
      defaultCharlWrong(2) = "Character String 6" @\
      defaultCharlWrong(3) = "Character String 7" @\
      defaultCharlWrong(4) = "Character String 8" @\
 @\
      !mtag_ex @\
      ! Set a char list Attribute on mobj Test @\
      call ESMF_AttributeSet(mname, name="Charl", & @\
        valueList=InCharl, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an Attribute char list on mobj test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
   @\
      !mtag_ex @\
      ! Get a char list Attribute on mobj Test @\
      call ESMF_AttributeGet(mname, name="Charl", & @\
        valueList=OutCharl, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting an Attribute char list from mobj test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. all (InCharl==OutCharl) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name="Charl", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing a Character list Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name="Charl", rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing a Character list Attribute on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get a char list default Attribute on mobj Test @\
      call ESMF_AttributeGet(mname, name="Charl", & @\
        valueList=DfltOutCharl, defaultvalueList=defaultCharl, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a default Attribute char list from mobj test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. all (DfltOutCharl == defaultCharl), & @\
        name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get a char list default Attribute on mobj Test @\
      call ESMF_AttributeGet(mname, name="Charl", & @\
        valueList=DfltOutCharl, defaultvalueList=defaultCharlWrong, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a wrong sized default Attribute char list from mobj test" @\
      call ESMF_Test(rc==ESMF_RC_ATTR_ITEMSOFF, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      items = 3 @\
      ! Get a char list Attribute isPresent flag and itemCount on mobj Test @\
      call ESMF_AttributeGet(mname, name="Charl", & @\
        valueList=OutCharl, itemCount=items, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting an Attribute char list isPresent flag and itemCount from mobj test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and. (isPresent.eqv..false.) & @\
                     .and. (items==0), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      ! Get a char list Attribute isPresent flag on mobj Test @\
      call ESMF_AttributeGet(mname, name="Charl", & @\
        valueList=OutCharl, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting an Attribute char list isPresent flag from mobj test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and. (isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      items = 3 @\
      ! Get a char list Attribute itemCount on mobj Test @\
      call ESMF_AttributeGet(mname, name="Charl", & @\
        valueList=OutCharl, itemCount=items, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting an Attribute char list itemCount from mobj test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and. (items==0), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      ! Get a char list Attribute error on mobj Test @\
      call ESMF_AttributeGet(mname, name="Charl", & @\
        valueList=OutCharl, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting an Attribute char list error from mobj test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !---------------------------------------------------------------------- @\
      !  Constant value from variable @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Add a constant character list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="ConstantCharList", & @\
        valueList=(/"imachar1","imachar2","imachar3"/), rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a constant character list Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get a constant character list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="ConstantCharList", & @\
        valueList=outConstantCharl, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a constant character list Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. & @\
                      all((/"imachar1","imachar2","imachar3"/)==outConstantCharl), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  Logical @\
      !---------------------------------------------------------------------- @\
      attrname = "flag" @\
      inLog = .true. @\
 @\
      !mtag_ex @\
      ! Set a logical attribute - scalar version @\
      call ESMF_AttributeSet(mname, name=attrname, value=inLog, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCESS" @\
      write(name, *) "Setting Grid Attribute (type Fortran logical scalar)" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      outLog = .false. @\
      !mtag_ex @\
      ! Get a logical attribute - scalar version @\
      call ESMF_AttributeGet(mname, name=attrname, value=outLog, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return logical .TRUE." @\
      write(name, *) "Getting Grid Attribute (type Fortran logical scalar)" @\
      call ESMF_Test((rc == ESMF_SUCCESS) & @\
                     .and.(inLog .eqv. outLog) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name=attrname, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing a logical Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name=attrname, rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing a logical Attribute on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, & @\
                     ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      dfltoutLog = .false. @\
      defaultLog = .true. @\
      !mtag_ex @\
      ! Get a logical attribute - scalar version @\
      call ESMF_AttributeGet(mname, name=attrname, value=dfltoutLog, & @\
        defaultvalue=defaultLog, rc=rc) @\
      write(failMsg, *) "Did not return logical .TRUE." @\
      write(name, *) "Getting Grid default Attribute (type Fortran logical scalar)" @\
      call ESMF_Test((rc == ESMF_SUCCESS).and.(defaultLog .eqv. dfltoutLog),   & @\
        name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get a logical Attribute isPresent flag on mobj test @\
      call ESMF_AttributeGet(mname, name=attrname, value=outLog, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return logical .TRUE." @\
      write(name, *) "Getting a logical Attribute isPresent flag on mobj test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      ! Get a logical Attribute error on mobj test @\
      call ESMF_AttributeGet(mname, name=attrname, value=outLog, rc=rc) @\
      write(failMsg, *) "Did not return logical .TRUE." @\
      write(name, *) "Getting a logical Attribute error on mobj test" @\
      call ESMF_Test((rc == ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !---------------------------------------------------------------------- @\
      !  Constant value from variable @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Add a constant Logical Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="ConstantLogical", value=.true., rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a constant Logical Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get a constant Logical Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="ConstantLogical", value=outConstantLogical, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a constant Logical Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(.true..eqv.outConstantLogical), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  Logical list @\
      !---------------------------------------------------------------------- @\
      attrname = "flag grid" @\
      inLogl = (/ .true., .false., .true. /) @\
 @\
      !mtag_ex @\
      ! Set a logical attribute - grid version @\
      call ESMF_AttributeSet(mname, name=attrname, & @\
        valueList=inLogl, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCESS" @\
      write(name, *) "Setting Grid Attribute (type Fortran logical grid)" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      outLogl = .false. @\
      itemCount = 4 @\
      !mtag_ex @\
      ! Get a logical attribute - grid version @\
      call ESMF_AttributeGet(mname, name=attrname,  & @\
        valueList=outLogl, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return logical .TRUE." @\
      write(name, *) "Getting Grid Attribute (type Fortran logical grid)" @\
      call ESMF_Test((rc == ESMF_SUCCESS) & @\
                     .and. all (inLogl .eqv. outLogl) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name=attrname, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing a logical list Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
   @\
      !mtag_ex @\
      ! Remove an Attribute on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name=attrname, rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing a logical list Attribute on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, & @\
                     ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      dfltoutLogl = (/.false.,.false.,.false./) @\
      defaultLogl = (/.true.,.true.,.true./) @\
      !mtag_ex @\
      ! Get a logical attribute - grid version @\
      call ESMF_AttributeGet(mname, name=attrname, & @\
        valueList=dfltoutLogl, defaultvalueList=defaultLogl, rc=rc) @\
      write(failMsg, *) "Did not return logical .TRUE." @\
      write(name, *) "Getting Grid default Attribute (type Fortran logical grid)" @\
      call ESMF_Test((rc == ESMF_SUCCESS) .and. all (defaultLogl .eqv. dfltoutLogl),   & @\
        name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      defaultLoglWrong = (/.true.,.true.,.true.,.true./) @\
      !mtag_ex @\
      ! Get a logical list default Attribute on mobj Test @\
      call ESMF_AttributeGet(mname, name="Logl", & @\
        valueList=dfltOutLogl, defaultvalueList=defaultLoglWrong, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a wrong sized default Attribute logical list from mobj test" @\
      call ESMF_Test(rc==ESMF_RC_ATTR_ITEMSOFF, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      items = 3 @\
      ! Get a logical list Attribute isPresent flag and itemCount on mobj test @\
      call ESMF_AttributeGet(mname, name=attrname,  & @\
        valueList=outLogl, itemCount=items, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return logical .TRUE." @\
      write(name, *) "Getting a logical list Attribute isPresent flag and itemCount on mobj test" @\
      call ESMF_Test((rc == ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.) & @\
                     .and.(items==0), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      ! Get a logical list Attribute isPresent flag on mobj test @\
      call ESMF_AttributeGet(mname, name=attrname,  & @\
        valueList=outLogl, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return logical .TRUE." @\
      write(name, *) "Getting a logical list Attribute isPresent flag on mobj test" @\
      call ESMF_Test((rc == ESMF_RC_ATTR_NOTSET) & @\
                     .and.(isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      items = 3 @\
      ! Get a logical list Attribute itemCount on mobj test @\
      call ESMF_AttributeGet(mname, name=attrname,  & @\
        valueList=outLogl, itemCount=items, rc=rc) @\
      write(failMsg, *) "Did not return logical .TRUE." @\
      write(name, *) "Getting a logical list Attribute itemCount on mobj test" @\
      call ESMF_Test((rc == ESMF_RC_ATTR_NOTSET) & @\
                     .and.(items==0), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_ex @\
      items = 3 @\
      ! Get a logical list Attribute error on mobj test @\
      call ESMF_AttributeGet(mname, name=attrname,  & @\
        valueList=outLogl, rc=rc) @\
      write(failMsg, *) "Did not return logical .TRUE." @\
      write(name, *) "Getting a logical list Attribute error on mobj test" @\
      call ESMF_Test((rc == ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !---------------------------------------------------------------------- @\
      !  Constant value from variable @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Add a constant Logical list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="ConstantLogicalList", & @\
        valueList=(/.true.,.false.,.true./), rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a constant Logical list Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get a constant Logical list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="ConstantLogicalList", & @\
        valueList=outConstantLogicall, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a constant Logical list Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. & @\
                      all((/.true.,.false.,.true./).eqv.outConstantLogicall), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  WRONG SIZE ARRAY TESTS @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_I4 list  -  wrong size array @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Add an ESMF_I4 list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrI4l", & @\
        valueList=inI4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_I4l Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      itemCount = 4 @\
      !mtag_ex @\
      ! Too Short Get an ESMF_I4 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4l", & @\
        valueList=outI4lLong(1:2), itemCount=itemCount, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_RC_ATTR_ITEMSOFF" @\
      write(name, *) "Getting an ESMF_I4l Attribute from mobj Test with short valueList" @\
      call ESMF_Test(rc/=ESMF_SUCCESS, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      itemCount = 3 @\
      !mtag_ex @\
      ! Too Long Get an ESMF_I4 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI4l", & @\
        valueList=outI4lLong(4:8), itemCount=itemCount, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4l Attribute from mobj Test with long valueList" @\
      call ESMF_Test(rc==ESMF_RC_ATTR_ITEMSOFF, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_I8 list  -  wrong size array @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Add an ESMF_I8 list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrI8l", & @\
        valueList=inI8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_I8l Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      itemCount = 4 @\
      !mtag_ex @\
      ! Too Short Get an ESMF_I8 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8l", & @\
        valueList=outI8lLong(1:2), itemCount=itemCount, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_RC_ATTR_ITEMSOFF" @\
      write(name, *) "Getting an ESMF_I8l Attribute from mobj Test with short valueList" @\
      call ESMF_Test(rc/=ESMF_SUCCESS, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      itemCount = 3 @\
      !mtag_ex @\
      ! Too Long Get an ESMF_I8 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrI8l", & @\
        valueList=outI8lLong(4:8), itemCount=itemCount, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8l Attribute from mobj Test with long valueList" @\
      call ESMF_Test(rc==ESMF_RC_ATTR_ITEMSOFF, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_R4 list  -  wrong size array @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Add an ESMF_R4 list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrR4l", & @\
        valueList=inR4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_R4l Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      itemCount = 4 @\
      !mtag_ex @\
      ! Too Short Get an ESMF_R4 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4l", & @\
        valueList=outR4lLong(1:2), itemCount=itemCount, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_RC_ATTR_ITEMSOFF" @\
      write(name, *) "Getting an ESMF_R4l Attribute from mobj Test with short valueList" @\
      call ESMF_Test(rc/=ESMF_SUCCESS, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      itemCount = 3 @\
      !mtag_ex @\
      ! Too Long Get an ESMF_R4 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR4l", & @\
        valueList=outR4lLong(4:8), itemCount=itemCount, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4l Attribute from mobj Test with long valueList" @\
      call ESMF_Test(rc==ESMF_RC_ATTR_ITEMSOFF, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_R8 list  -  wrong size array @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Add an ESMF_R8 list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrR8l", & @\
        valueList=inR8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_R8l Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      itemCount = 4 @\
      !mtag_ex @\
      ! Too Short Get an ESMF_R8 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8l", & @\
        valueList=outR8lLong(1:2), itemCount=itemCount, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_RC_ATTR_ITEMSOFF" @\
      write(name, *) "Getting an ESMF_R8l Attribute from mobj Test with short valueList" @\
      call ESMF_Test(rc/=ESMF_SUCCESS, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      itemCount = 3 @\
      !mtag_ex @\
      ! Too Long Get an ESMF_R8 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="AttrR8l", & @\
        valueList=outR8lLong(4:8), itemCount=itemCount, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8l Attribute from mobj Test with long valueList" @\
      call ESMF_Test(rc==ESMF_RC_ATTR_ITEMSOFF, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  Character list wrong size array @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Set a char list Attribute on mobj Test @\
      call ESMF_AttributeSet(mname, name="Charl", & @\
        valueList=InCharl, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an Attribute char list on mobj test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
   @\
      itemCount = 4 @\
      !mtag_ex @\
      ! Too Short Get a char list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="Charl", & @\
        valueList=outCharlLong(1:2),itemCount=itemCount, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_RC_ATTR_ITEMSOFF" @\
      write(name, *) "Getting an Attribute char list from mobj test with short valueList" @\
      call ESMF_Test((rc/=ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      itemCount = 3 @\
      !mtag_ex @\
      ! Too Long Get a char list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="Charl", & @\
        valueList=outCharlLong(4:8), itemCount=itemCount, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a default Attribute char list from mobj test with long valueList" @\
      call ESMF_Test(rc==ESMF_RC_ATTR_ITEMSOFF, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  Logical wrong size array @\
      !---------------------------------------------------------------------- @\
      !mtag_ex @\
      ! Set a logical attribute - grid version @\
      call ESMF_AttributeSet(mname, name=attrname, & @\
        valueList=inLogl, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCESS" @\
      write(name, *) "Setting an Attribute logical list on mobj test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      outLogl = .false. @\
      !mtag_ex @\
      ! Too Short Get an ESMF_R8 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name=attrname,  & @\
        valueList=outLoglLong(1:2), rc=rc) @\
      write(failMsg, *) "Did not return ESMF_RC_ATTR_ITEMSOFF" @\
      write(name, *) "Getting an logical list Attribute from mobj Test with short valueList" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_ITEMSOFF), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      itemCount = 3 @\
      !mtag_ex @\
      ! Too Long Get an ESMF_R8 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name=attrname, & @\
        valueList=outLoglLong(4:8), itemCount=itemCount, rc=rc) @\
      write(failMsg, *) "Did not return logical .TRUE." @\
      write(name, *) "Getting an logical list Attribute from mobj Test with long valueList" @\
      call ESMF_Test(rc==ESMF_RC_ATTR_ITEMSOFF, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
      attrname="Character_name" @\
      attrvalue="stuff" @\
      ! Set a Character Attribute on a mobj to test the get info calls @\
      call ESMF_AttributeSet(mname, name=attrname, value=attrvalue, rc=rc) @\
 @\
      !mtag_ex @\
      ! Get the Attribute count from a mobj Test @\
      call ESMF_LogWrite("Start: Get the Attribute count from a mobj Test") @\
      call ESMF_AttributeGet(mname, count=count, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting the Attribute count from a mobj Test" @\
      write(logmsg, *) "count=", count @\
      call ESMF_LogWrite(logmsg) @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(count.ge.10), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      call ESMF_LogWrite("End: Get the Attribute count from a mobj Test") @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get Attribute info by name from a mobj Test @\
      call ESMF_AttributeGet(mname, name=attrname, typekind=attrTK, & @\
        itemcount=items, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting Attribute info by name from a mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                                       .and.(attrTK==ESMF_TYPEKIND_CHARACTER) & @\
                                       .and.(items==1), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
^endif @\
 @\
      items = 3 @\
      attrTK = ESMF_TYPEKIND_CHARACTER @\
      isPresent = .true. @\
      !mtag_nex @\
      ! Get Attribute info by name from mobj Test @\
      call ESMF_AttributeGet(mname, name="NOTHERE", & @\
        typekind=attrTK, itemCount=items, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting Attribute info by name with isPresent flag, itemCount, and typekind from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. (attrTK==ESMF_NOKIND) & @\
                     .and. (items==0) & @\
                     .and. (isPresent.eqv..false.),& @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      items = 3 @\
      attrTK = ESMF_TYPEKIND_CHARACTER @\
      !mtag_nex @\
      ! Get Attribute info by name from mobj Test @\
      call ESMF_AttributeGet(mname, name="NOTHERE", & @\
        typekind=attrTK, itemCount=items, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting Attribute info by name with typekind and itemCount from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. (attrTK==ESMF_NOKIND) & @\
                     .and. (items==0) & @\
                     .and. (isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      attrTK = ESMF_TYPEKIND_CHARACTER @\
      !mtag_nex @\
      ! Get Attribute info by name from mobj Test @\
      call ESMF_AttributeGet(mname, name="NOTHERE", & @\
        typekind=attrTK, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting Attribute info by name with typekind from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. (attrTK==ESMF_NOKIND) & @\
                     .and. (isPresent.eqv..false.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Get Attribute info by name from mobj Test @\
      call ESMF_AttributeGet(mname, name="NOTHERE", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting Attribute info by name with no args, will fail, from mobj Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
^ifdef ESMF_TESTEXHAUSTIVE @\
 @\
      !mtag_ex @\
      ! Get Attribute info by num from a mobj Test @\
      call ESMF_AttributeGet(mname, attributeIndex=38, name=attrnameOut, & @\
        typekind=attrTK, itemcount=items, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting Attribute info by num from a mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(attrname==attrnameOut) & @\
                                       .and.(attrTK==ESMF_TYPEKIND_CHARACTER) & @\
                                       .and.(items==1), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
^endif @\
 @\
! < end macro - do not edit directly >  @\
!------------------------------------------------------------------------------

! main test body
#define AttributeTestCopyMacro(mname, mobj, mdesc, mcreate, mtag_ex, mtag_nex) \
!---------------------------------------------------------------------------- @\
! <This section created by macro - do not edit directly> @\
 @\
      mname##A = mcreate##Create(rc=rc) @\
      mname##Alias = mcreate##Create(rc=rc) @\
      mname##Hybrid = mcreate##Create(rc=rc) @\
      mname##Value = mcreate##Create(rc=rc) @\
 @\
    !------------------------------------------------------------------------- @\
    !  AttributeCopy @\
    !------------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Get a constant character Attribute from mobj Test @\
      call ESMF_AttributeSet(mname##A, name="CopyChar", value="imacharA", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Setting a constant character Attribute on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Copy mdesc Attribute hierarchy ALIAS Test @\
      call ESMF_AttributeCopy(mname##A, mname##Alias, & @\
        attcopy=ESMF_ATTCOPY_REFERENCE, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Copying mdesc Attribute hierarchy ALIAS Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_nex @\
      ! Get a constant character Attribute from mobj Test @\
      call ESMF_AttributeGet(mname##Alias, name="CopyChar", value=outConstantChar, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a constant character Attribute from the alias mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.("imacharA"==outConstantChar), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
      print *, trim(outConstantChar) @\
 @\
      !mtag_nex @\
      ! Confirm copy by reference is indeed a reference @\
      call ESMF_AttributeSet(mname##A, name="RefTest", value="imaref", rc=rc) @\
      if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT) @\
      call ESMF_AttributeGet(mname##Alias, name="RefTest", value=outConstantChar, rc=rc) @\
      if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Setting a constant character Attribute on mobj Test" @\
      call ESMF_Test((trim(outConstantChar)=="imaref"), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
       !---------------------------------------------------------------------- @\
  @\
      !mtag_nex @\
      ! Get the Attribute count from a mobj Test @\
      call ESMF_AttributeGet(mname##Alias, count=count, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting the .Attribute count from a mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(count.ge.0), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
      print *, "count = ", count @\
 @\
      !mtag_nex @\
      ! Get a constant character Attribute from the alias mobj Test @\
      call ESMF_LogWrite("Start: Getting a constant character Attribute from the alias mobj Test") @\
      call ESMF_AttributeGet(mname##Alias, name="CopyChar", value=outConstantChar, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a constant character Attribute from the alias mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.("imacharA"==outConstantChar), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      call ESMF_LogWrite("End: Getting a constant character Attribute from the alias mobj Test") @\
      !---------------------------------------------------------------------- @\
      print *, outConstantChar @\
 @\
      !mtag_nex @\
      ! Copy mdesc Attribute hierarchy VALUE ONE LEVEL Test @\
      call ESMF_AttributeCopy(mname##A, mname##Value, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Copying mdesc Attribute hierarchy VALUE ONE LEVEL Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
      !mtag_nex @\
      ! Copy mdesc Attribute hierarchy HYBRID Test @\
      call ESMF_AttributeCopy(mname##A, mname##Hybrid, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Copying mdesc Attribute hierarchy HYBRID Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !------------------------------------------------------------------------ @\
 @\
       !mtag_nex @\
       ! Copy mdesc Attribute by reference to self Test @\
       call ESMF_AttributeCopy(mname##A, mname##A, & @\
         attcopy=ESMF_ATTCOPY_REFERENCE, rc=rc) @\
       write(failMsg, *) "Did not return ESMF_SUCCESS" @\
       write(name, *) "Copy mdesc Attribute by reference to self Test" @\
       call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
       !------------------------------------------------------------------------ @\
  @\
      call mobj##Destroy(mname##A, rc=rc) @\
      call mobj##Destroy(mname##Alias, rc=rc) @\
      call mobj##Destroy(mname##Hybrid, rc=rc) @\
      call mobj##Destroy(mname##Value, rc=rc) @\
 @\
! < end macro - do not edit directly >  @\
!------------------------------------------------------------------------------

! main test body
#define AttributeReadWriteTestMacro(mname, mname2, mobj, mtag_ex, mtag_nex) \
!---------------------------------------------------------------------------- @\
! <This section created by macro - do not edit directly> @\
 @\
      !---------------------------------------------------------------------- @\
      !  ESMF_I4 @\
      !---------------------------------------------------------------------- @\
      inI4 = 4 @\
      !mtag_nex @\
      ! Add an ESMF_I4 Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrI4", value=inI4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_I4 Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
^ifdef ESMF_TESTEXHAUSTIVE @\
 @\
      inI4l = (/1,2,3/) @\
      !mtag_ex @\
      ! Add an ESMF_I4 list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrI4l", & @\
        valueList=inI4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_I4l Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      inI8 = 4 @\
      !mtag_ex @\
      ! Add an ESMF_I8 Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrI8", value=inI8, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_I8 Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      inI8l = (/1,2,3/) @\
      !mtag_ex @\
      ! Add an ESMF_I8 list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrI8l", & @\
        valueList=inI8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_I8l Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      inR4 = 4 @\
      !mtag_ex @\
      ! Add an ESMF_R4 Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrR4", value=inR4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_R4 Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      inR4l = (/1,2,3/) @\
      !mtag_ex @\
      ! Add an ESMF_R4 list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrR4l", & @\
        valueList=inR4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_R4l Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      inR8 = 4 @\
      !mtag_ex @\
      ! Add an ESMF_R8 Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrR8", value=inR8, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_R8 Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      inR8l = (/1,2,3/) @\
      !mtag_ex @\
      ! Add an ESMF_R8 list Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name="AttrR8l", & @\
        valueList=inR8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding an ESMF_R8l Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      inChar = "charAttribute" @\
      attrName = "char_" @\
      !mtag_ex @\
      ! Add a char Attribute to mobj Test @\
      call ESMF_AttributeSet(mname, name=attrname, value=inChar, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding a char Attribute to mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      InCharl(1) = "Character String 1" @\
      InCharl(2) = "Character String 2" @\
      InCharl(3) = "Character String 3" @\
 @\
      !mtag_ex @\
      ! Set a char list Attribute on mobj Test @\
      call ESMF_AttributeSet(mname, name="Charl", & @\
        valueList=InCharl, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an Attribute char list on mobj test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      attrname = "flag" @\
      inLog = .true. @\
 @\
      !mtag_ex @\
      ! Set a logical attribute - scalar version @\
      call ESMF_AttributeSet(mname, name=attrname, value=inLog, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCESS" @\
      write(name, *) "Setting Grid Attribute (type Fortran logical scalar)" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      attrname = "flag grid" @\
      inLogl = (/ .true., .false., .true. /) @\
 @\
      !mtag_ex @\
      ! Set a logical attribute - grid version @\
      call ESMF_AttributeSet(mname, name=attrname, & @\
        valueList=inLogl, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCESS" @\
      write(name, *) "Setting Grid Attribute (type Fortran logical grid)" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
^endif @\
 @\
      !---------------------------------------------------------------------- @\
      !  Attribute Read/Write @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Write Attribute info to JSON from mobj Test @\
      call ESMF_AttributeWrite(mname, filename="Attribute.json", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Writing Attribute info to JSON from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      call ESMF_InfoGetFromHost(mname2, info, rc=rc) @\
      call ESMF_InfoDestroy(info, rc=rc) @\
 @\
      !mtag_nex @\
      ! Read Attribute info from JSON on mobj Test @\
      call ESMF_AttributeRead(mname2, filename="Attribute.json", rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Reading Attribute info from JSON on mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !---------------------------------------------------------------------- @\
      !  Get Attributes Read from JSON to validate against those already set @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_nex @\
      ! Get an ESMF_I4 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname2, name="AttrI4", value=outI4, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and.(inI4==outI4) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
^ifdef ESMF_TESTEXHAUSTIVE @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I4 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname2, name="AttrI4l", & @\
        valueList=outI4l, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4l Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. all (inI4l==outI4l) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I8 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname2, name="AttrI8", value=outI8, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and.(inI8==outI8) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_I8 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname2, name="AttrI8l", & @\
        valueList=outI8l, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8l Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. all (inI8l==outI8l) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_R4 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname2, name="AttrR4", value=outR4, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and.(inR4==outR4) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_R4 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname2, name="AttrR4l", & @\
        valueList=outR4l, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4l Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. all (inR4l==outR4l) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_R8 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname2, name="AttrR8", value=outR8, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8 Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and.(inR8==outR8) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get an ESMF_R8 list Attribute from mobj Test @\
      call ESMF_AttributeGet(mname2, name="AttrR8l", & @\
        valueList=outR8l, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8l Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. all (inR8l==outR8l) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get a char Attribute from mobj Test @\
      call ESMF_AttributeGet(mname2, name=attrname, value=outChar, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a char Attribute from mobj Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. (inChar==outChar) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag_ex @\
      ! Get a char list Attribute on mobj Test @\
      call ESMF_AttributeGet(mname2, name="Charl", & @\
        valueList=OutCharl, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting an Attribute char list from mobj test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. all (InCharl==OutCharl) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      outLog = .false. @\
      !mtag_ex @\
      ! Get a logical attribute - scalar version @\
      call ESMF_AttributeGet(mname2, name=attrname, value=outLog, & @\
        isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting an Attribute Fortran logical from mobj test" @\
      call ESMF_Test((rc == ESMF_SUCCESS) & @\
                     .and.(inLog .eqv. outLog) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      outLogl = .false. @\
      !mtag_ex @\
      ! Get a logical attribute - grid version @\
      call ESMF_AttributeGet(mname2, name=attrname,  & @\
        valueList=outLogl, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting an Attribute Fortran logical list from mobj test" @\
      call ESMF_Test((rc == ESMF_SUCCESS) & @\
                     .and. all (inLogl .eqv. outLogl) & @\
                     .and.(isPresent.eqv..true.), & @\
                     name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
^endif @\
 @\
! < end macro - do not edit directly >  @\
!------------------------------------------------------------------------------

