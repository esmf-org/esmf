#if 0
! $Id$
!
! Earth System Modeling Framework
! Copyright (c) 2002-2025, University Corporation for Atmospheric Research,
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics
! Laboratory, University of Michigan, National Centers for Environmental
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory,
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
!
#endif
#if 0
!------------------------------------------------------------------------------
! Macros for Attribute testing
!
! The structure of this file and these macros are compatible with the gcc
! preprocessor - they assume the use of ## as a paste operator, require that
! no additional spaces be added (e.g. no pre-tokenization as done by some
! preprocessors which assume C syntax), assume an option exists to suppress
! C-specific syntax directives such as #line or #pragma, and that an option
! exists to produce output on stdout and not into a file.  The output of
! the preprocessor phase is a valid .F90 file ready to be compiled by the
! standard fortran compiler.  (gcc is *not* used for compilation.)
!
! The macros are intended to be written with @\ at the end of each line of
! a multiline macro, and the output piped thru 'tr' to translate each
! @ into <cr> to produce multiple lines of fortran code from a single
! macro invocation.   If any preprocessor directives are to be left in the
! output file (e.g. #include ""), the source should use ^directive (e.g.
! ^include "header.h" ) again using 'tr' to substitute # for ^ after
! preprocessing is completed.  
!------------------------------------------------------------------------------
#endif

! variable declarations
#define AttPackTestVariablesMacro() \
 @\
^ifdef ESMF_TESTEXHAUSTIVE @\
      integer :: i @\
      type(ESMF_AttPack)     :: attpack, attpack2 @\
      character(ESMF_MAXSTR) :: conv, nestconv, purp, nestpurp @\
 @\
      integer(ESMF_KIND_I4)  :: inI4, outI4, inI4l(3), outI4l(3) @\
      integer(ESMF_KIND_I8)  :: inI8, outI8, inI8l(3), outI8l(3) @\
      real(ESMF_KIND_R4)     :: inR4, outR4, inR4l(3), outR4l(3) @\
      real(ESMF_KIND_R4)     :: inR8, outR8, inR8l(3), outR8l(3) @\
      character(ESMF_MAXSTR) :: inChar, outChar, inCharl(3), outCharl(3) @\
      logical                :: inLog, outLog, inLogl(3), outLogl(3) @\
 @\
      character(ESMF_MAXSTR), dimension(12) :: attpackList, & @\
                                               attpackListTNames, & @\
                                               attpackListTNames2 @\
      character(ESMF_MAXSTR), dimension(3) :: attpackListOut2,  & @\
                                              attpackListOut3, & @\
                                              attpackListOut4, & @\
                                              attpackDfltList,  & @\
                                              attpackDfltList2 @\
      character(ESMF_MAXSTR) :: attrname, attrvalue, filename, baseline @\
 @\
      logical                :: rc_logical, isPresent @\
      integer                :: count, attrcount, packcount, rc2 @\
      character(ESMF_MAXSTR), dimension(1) :: exclusions @\
      type(ESMF_Info) :: info_actual, info_desired, info_handle @\
 @\
^endif @\
! < end macro - do not edit directly >  @\
!------------------------------------------------------------------------------

#define AttPackTestMacro(mname, mobj, mtag, mfilename) \
!------------------------------------------------------------------------------ @\
! <This section created by macro - do not edit directly> @\
 @\
^ifdef ESMF_TESTEXHAUSTIVE @\
 @\
      conv = "customconvention" @\
      purp = "custompurpose   " @\
      attpackList(1) = "ESMF_I4" @\
      attpackList(2) = "ESMF_I4_list" @\
      attpackList(3) = "ESMF_I8" @\
      attpackList(4) = "ESMF_I8_list" @\
      attpackList(5) = "ESMF_R4" @\
      attpackList(6) = "ESMF_R4_list" @\
      attpackList(7) = "ESMF_R8" @\
      attpackList(8) = "ESMF_R8_list" @\
      attpackList(9) = "ESMF_Logical" @\
      attpackList(10) = "ESMF_Logical_list" @\
      attpackList(11) = "ESMF_Character" @\
      attpackList(12) = "ESMF_Character_list" @\
 @\
      inI4 = 4 @\
      inI4l = (/1,2,3/) @\
      inI8 = 4 @\
      inI8l = (/1,2,3/) @\
      inR4 = 4 @\
      inR4l = (/1,2,3/) @\
      inR8 = 4 @\
      inR8l = (/1,2,3/) @\
      inLog = .true. @\
      inLogl(1) = .true. @\
      inLogl(2) = .false. @\
      inLogl(3) = .true. @\
      inChar = "charAttribute" @\
      InCharl(1) = "Character String 1" @\
      InCharl(2) = "Character String 2" @\
      InCharl(3) = "Character String 3" @\
 @\
    !------------------------------------------------------------------------- @\
    !  Attribute package redundancy and addition @\
    !------------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Create a custom Attribute package on mobj Test @\
      call ESMF_AttributeAdd(mname, conv, purp, attrList=attpackList, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Creating a custom Attribute package on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Add to a custom Attribute package on mobj Test @\
      attpackList(1) = "ESMF_I4_new" @\
      call ESMF_AttributeAdd(mname, conv, purp, attrList=attpackList(1:1), & @\
        rc=rc) @\
      attrcount = -5 @\
      call ESMF_AttributeGet(mname, count=attrcount, attpack=attpack, & @\
                             attnestflag=ESMF_ATTNEST_OFF, rc=rc) @\
      packcount = -5 @\
      call ESMF_AttributeGet(mname, & @\
                             attnestflag=ESMF_ATTNEST_OFF, & @\
                             attcountflag=ESMF_ATTGETCOUNT_ATTPACK, & @\
                             count=packcount, rc=rc) @\
      ! reset the attrList @\
      attpackList(1) = "ESMF_I4" @\
      ! remove the additional attribute @\
      call ESMF_AttributeRemove(mname, name="ESMF_I4_new", attpack=attpack, & @\
        rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Add to a custom Attribute package on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) & @\
                     .and. attrcount == 13 & @\
                     .and. packcount == 1, name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
    !------------------------------------------------------------------------- @\
    !  Attribute package custom @\
    !------------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set an ESMF_I4 Attribute in an Attribute package on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_I4", value=inI4, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an ESMF_I4 Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get an ESMF_I4 Attribute using an AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_I4", attpack=attpack, value=outI4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4 Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(inI4==outI4), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set an ESMF_I4 list Attribute in an Attribute package using an AttPack object on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_I4_list", valueList=inI4l, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an ESMF_I4 list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get an ESMF_I4 list Attribute using an AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_I4_list", attpack=attpack, & @\
        valueList=outI4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I4 list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. all (inI4l==outI4l), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set an ESMF_I8 Attribute in an Attribute package using an AttPack object on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_I8", value=inI8, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an ESMF_I8 Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get an ESMF_I8 Attribute using an AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_I8", attpack=attpack, value=outI8, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8 Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. (inI8==outI8), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
     !mtag @\
      ! Set an ESMF_I8 list Attribute in an Attribute package using an AttPack object on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_I8_list", valueList=inI8l, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an ESMF_I8 list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get an ESMF_I8 list Attribute using an AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_I8_list", attpack=attpack, & @\
        valueList=outI8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_I8 list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. all (inI8l==outI8l), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set an ESMF_R4 Attribute in an Attribute package using an AttPack object on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_R4", value=inR4, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an ESMF_R4 Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get an ESMF_R4 Attribute using an AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_R4", attpack=attpack, value=outR4, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4 Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(inR4==outR4), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set an ESMF_R4 list Attribute in an Attribute package using an AttPack object on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_R4_list", valueList=inR4l, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an ESMF_R4 list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get an ESMF_R4 list Attribute using an AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_R4_list", attpack=attpack, & @\
        valueList=outR4l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R4 list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and. all (inR4l==outR4l), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set an ESMF_R8 Attribute in an Attribute package using an AttPack object on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_R8", value=inR8, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an ESMF_R8name Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get an ESMF_R8 Attribute using an AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_R8", attpack=attpack, value=outR8, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8 Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS).and.(inR8==outR8), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set an ESMF_R8 list Attribute in an Attribute package using an AttPack object on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_R8_list", valueList=inR8l, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an ESMF_R8 list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get an ESMF_R8 list Attribute using an AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_R8_list", attpack=attpack, & @\
        valueList=outR8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8 list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. all (inR8l==outR8l), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set a logical Attribute in an Attribute package using an AttPack object on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_Logical", value=inLog, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting a logical Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get a logical Attribute using an AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_Logical", attpack=attpack, value=outLog, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a logical Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. (inLog.eqv.outLog), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set a logical list Attribute in an Attribute package using an AttPack object  on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_Logical_list", valueList=inLogl, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting a logical list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get a logical list Attribute using an AttPack object on a Array Test @\
      call ESMF_AttributeGet(mname, name="ESMF_Logical_list", attpack=attpack, & @\
        valueList=OutLogl, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a logical list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. all (InLogl(1:2).eqv.OutLogl(1:2)), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set a character Attribute in an Attribute package using an AttPack object  on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_Character", value=inChar, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting a character Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get a character Attribute using an AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_Character", attpack=attpack, value=outChar, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a character Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. (inChar==outChar), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set a character list Attribute in an Attribute package using an AttPack object on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_Character_list", valueList=inCharl, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting a character list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get a character list Attribute using an AttPack object on a Array Test @\
      call ESMF_AttributeGet(mname, name="ESMF_Character_list", attpack=attpack, & @\
        valueList=OutCharl, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a character list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. all (InCharl(1:2)==OutCharl(1:2)), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Remove an Attribute on mobj Test @\
      call ESMF_AttributeRemove(mname, name="ESMF_Character_list", attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing an Char list Attribute using an AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get the count of an AttPack object on mobj @\
      count = -5 @\
      call ESMF_AttributeGet(mname, convention=conv, purpose=purp, & @\
                             attnestflag=ESMF_ATTNEST_ON, count=count, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Test for getting the Attribute count of an Attpack on mobj, ", & @\
                     "count = ", count @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. count.eq.11), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get the count of an AttPack object on mobj @\
      count = -5 @\
      call ESMF_AttributeGet(mname, attpack=attpack, & @\
                             attnestflag=ESMF_ATTNEST_ON, count=count, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Test for getting the Attribute count using an Attpack object on mobj, ", & @\
                     "count = ", count @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. count.eq.11), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get the count of an AttPack object on mobj @\
      count = -5 @\
      call ESMF_AttributeGet(mname, convention=conv, purpose=purp, & @\
                             attnestflag=ESMF_ATTNEST_ON, & @\
                             attcountflag=ESMF_ATTGETCOUNT_ATTPACK, & @\
                             count=count, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Test for getting the Attpack count of an Attpack on mobj, ", & @\
                     "count = ", count @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. count.eq.0), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get the count of an AttPack object on mobj @\
      count = -5 @\
      call ESMF_AttributeGet(mname, attpack=attpack, & @\
                             attnestflag=ESMF_ATTNEST_ON, & @\
                             attcountflag=ESMF_ATTGETCOUNT_ATTPACK, & @\
                             count=count, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Test for getting the Attpack count using an Attpack object on mobj, ", & @\
                     "count = ", count @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. count.eq.0), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
    !------------------------------------------------------------------------- @\
    !  Attribute package - custom nested @\
    !------------------------------------------------------------------------- @\
      nestconv = "customconvention_top" @\
      nestpurp = "custompurpose_top" @\
      attpackListTNames2(1) = "ESMF_I4name2" @\
      attpackListTNames2(2) = "ESMF_I4namelist2" @\
      attpackListTNames2(3) = "ESMF_I8name2" @\
      attpackListTNames2(4) = "ESMF_I8namelist2" @\
      attpackListTNames2(5) = "ESMF_R4name2" @\
      attpackListTNames2(6) = "ESMF_R4namelist2" @\
      attpackListTNames2(7) = "ESMF_R8name2" @\
      attpackListTNames2(8) = "ESMF_R8namelist2" @\
      attpackListTNames2(9) = "Logical_name2" @\
      attpackListTNames2(10) = "Logical_namelist2" @\
      attpackListTNames2(11) = "Character_name2" @\
      attpackListTNames2(12) = "Character_namelist2" @\
      attpackDfltList2(1) = "Custom4" @\
      attpackDfltList2(2) = "Custom5" @\
      attpackDfltList2(3) = "Custom6" @\
      attrname = "Character_namelist2" @\
 @\
      !mtag @\
      ! Add multiple Attributes to a nested Attribute package on mobj Test @\
      call ESMF_AttributeAdd(mname, convention=nestconv, purpose=nestpurp, & @\
        attrList=attpackListTNames2, nestConvention=conv, nestPurpose=purp, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Adding multiple Attributes to a nested Attribute package on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
       !mtag @\
       ! Add a duplicate attpack. Ensure mappig is identical after adding. @\
       call ESMF_InfoGetFromHost(mname, info_handle, rc=rc) @\
       if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT) @\
       info_desired = ESMF_InfoCreate(info_handle, rc=rc) @\
       if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT) @\
       call ESMF_AttributeAdd(mname, convention=nestconv, purpose=nestpurp, & @\
         attrList=attpackListTNames2, nestConvention=conv, nestPurpose=purp, rc=rc) @\
       info_actual = ESMF_InfoCreate(info_handle, rc=rc) @\
       if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT) @\
       if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT) @\
       write(failMsg, *) "Did not return ESMF_SUCCESS" @\
       write(name, *) "Add a duplicate attpack. Ensure mappig is identical after adding." @\
       call ESMF_Test((info_actual==info_desired), name, failMsg, result, ESMF_SRCLINE) @\
       !---------------------------------------------------------------------- @\
  @\
      !mtag @\
      ! Remove an Attribute in a nested Attribute package on mobj Test @\
      call ESMF_AttributeRemove(mname, name=attrname, convention=nestconv, & @\
        purpose=nestpurp, rc=rc) @\
      call ESMF_AttributeGet(mname, name=attrname, isPresent=isPresent, rc=rc2) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing an Attribute in a nested Attribute package on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. rc2==ESMF_SUCCESS .and. .not. isPresent), & @\
        name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Remove an Attribute in a nested Attribute package on mobj Test, again @\
      call ESMF_AttributeRemove(mname, name=attrname, convention=nestconv, & @\
        purpose=nestpurp, rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND" @\
      write(name, *) "Removing an Attribute in a nested Attribute package on mobj Test, again" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get a char list default Attribute in a nested Attribute package on mobj Test @\
      call ESMF_AttributeGet(mname, name=attrname, & @\
        valueList=attpackListOut4, defaultvalueList=attpackDfltList2, & @\
        convention=nestconv, purpose=nestpurp, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a default Attribute character list in a nested Attribute package on mobj test2" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. all (attpackListOut4 == attpackDfltList2), & @\
        name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
   !------------------------------------------------------------------------- @\
   !  Attribute nestflag get, set and remove @\
   !------------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get a nested AttPack on mobj test @\
      call ESMF_AttributeGetAttPack(mname, conv, purp, & @\
        attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Get a nested AttPack on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      attrname = "ESMF_Character" @\
      !mtag @\
      ! Get a char list attribute in a nested Attribute package on mobj Test @\
      call ESMF_AttributeGet(mname, name=attrname, & @\
        value=outChar, convention=conv, purpose=purp, & @\
        attnestflag=ESMF_ATTNEST_ON, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a char list Attribute in a nested Attribute package on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. inChar == outChar, & @\
        name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set an ESMF_R8 list Attribute using a nested AttPack object  object on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_R8_list", valueList=inR8l, & @\
        attpack=attpack, attnestflag=ESMF_ATTNEST_ON, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an ESMF_R8 list Attribute using a nested AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get an ESMF_R8 list Attribute using a nested AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_R8_list", attpack=attpack, & @\
        attnestflag=ESMF_ATTNEST_ON, valueList=outR8l, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting an ESMF_R8 list Attribute using a nested AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. all (inR8l==outR8l), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set a logical Attribute using a nested AttPack object on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_Logical", value=inLog, & @\
        attpack=attpack, attnestflag=ESMF_ATTNEST_ON, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting a logical Attribute using a nested AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get a logical Attribute using a nested AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_Logical", attpack=attpack, & @\
        attnestflag=ESMF_ATTNEST_ON, value=outLog, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a logical Attribute using a nested AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. (inLog.eqv.outLog), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Set a character Attribute using a nested AttPack object on mobj Test @\
      call ESMF_AttributeSet(mname, name="ESMF_Character", value=inChar, & @\
        attpack=attpack, attnestflag=ESMF_ATTNEST_ON, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting a character Attribute using a nested AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get a character Attribute using a nested AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_Character", attpack=attpack, & @\
        attnestflag=ESMF_ATTNEST_ON, value=outChar, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a character Attribute using a nested AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. (inChar==outChar), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Remove an Attribute using a nested AttPack object on mobj Test @\
      call ESMF_AttributeRemove(mname, name="ESMF_Character", & @\
        attpack=attpack, attnestflag=ESMF_ATTNEST_ON, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing an Char list Attribute using a nested AttPack object on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      isPresent = .false. @\
      ! Test for the presence of a nested AttPack2 on mobj @\
      call ESMF_AttributeGetAttPack(mname, conv, purp, isPresent=isPresent, & @\
        attnestflag=ESMF_ATTNEST_ON, rc=rc)      @\
      write(failMsg, *) "Did not return isPresent=True" @\
      write(name, *) "Test for the presence of a nested AttPack2 on mobj" @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. isPresent.eqv..true.), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get a character Attribute using a nested AttPack object on mobj Test @\
      call ESMF_AttributeGet(mname, name="ESMF_Character", attpack=attpack, & @\
        attnestflag=ESMF_ATTNEST_OFF, value=outChar, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS or wrong value" @\
      write(name, *) "Getting a character Attribute in a nested AttPack with ESMF_ATTNEST_OFF on ", mobj, " Test" @\
      call ESMF_Test((rc/=ESMF_SUCCESS), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      isPresent = .false. @\
      ! Test for the presence of a nested AttPack on mobj @\
      call ESMF_AttributeGet(mname, name="ESMF_Character", convention=conv, purpose=purp, & @\
        attnestflag=ESMF_ATTNEST_ON, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return isPresent=True" @\
      write(name, *) "Test for the presence of a nested AttPack on mobj" @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. isPresent.eqv..false.), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      isPresent = .false. @\
      ! Test for the presence of a nested AttPack using index on mobj @\
      call ESMF_AttributeGet(mname, 3, attrname, convention=conv, purpose=purp, & @\
        attnestflag=ESMF_ATTNEST_ON, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return isPresent=True" @\
      write(name, *) "Test for the presence of a nested AttPack using index on mobj" @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. isPresent.eqv..true.), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
    !------------------------------------------------------------------------- @\
    !  Attribute package counts @\
    !------------------------------------------------------------------------- @\
 @\
      ! Get the count of an AttPack object on mobj Test @\
      count = -5 @\
      !mtag @\
      call ESMF_AttributeGet(mname, count, & @\
                             convention=nestconv, purpose=nestpurp, & @\
                             attcountflag=ESMF_ATTGETCOUNT_ATTRIBUTE, & @\
                             attnestflag=ESMF_ATTNEST_OFF, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Test for getting the count of Attributes in a ", & @\
                     " nested Attpack, count = ", count @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. count.eq.11), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      ! Get the count of an AttPack object on mobj Test @\
      count = -5 @\
      !mtag @\
      call ESMF_AttributeGet(mname, count, & @\
                             convention=nestconv, purpose=nestpurp, & @\
                             attcountflag=ESMF_ATTGETCOUNT_ATTPACK, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Test for getting the count of Attpacks in a ", & @\
                     " nested Attpack, count = ", count @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. count.eq.1), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      ! Get the count of an AttPack object on mobj Test @\
      count = -5 @\
      !mtag @\
      call ESMF_AttributeGet(mname, count, & @\
                             convention=conv, purpose=purp, & @\
                             attcountflag=ESMF_ATTGETCOUNT_ATTRIBUTE, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Test for getting the count of Attributes in a ", & @\
                     " nested Attpack, count = ", count @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. count.eq.10), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      ! Get the count of an AttPack object on mobj Test @\
      count = -5 @\
      !mtag @\
      call ESMF_AttributeGet(mname, count, & @\
                             convention=conv, purpose=purp, & @\
                             attcountflag=ESMF_ATTGETCOUNT_ATTPACK, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Test for getting the count of Attpacks in a ", & @\
                     " nested Attpack, count = ", count @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. count.eq.0), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
    !------------------------------------------------------------------------- @\
    !  Attribute nestflag @\
    !------------------------------------------------------------------------- @\
 @\
      ! Get the count of an AttPack object on mobj Test @\
      count = -5 @\
      !mtag @\
      call ESMF_AttributeGet(mname, count, & @\
                             convention=nestconv, purpose=nestpurp, & @\
                             attcountflag=ESMF_ATTGETCOUNT_ATTRIBUTE, & @\
                             attnestflag=ESMF_ATTNEST_OFF, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Test for getting the count of Attributes in a ", & @\
                     " nested Attpack with ATTNEST_OFF, count = ", count @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. count.eq.11), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      ! Get the count of an AttPack object on mobj Test @\
      count = -5 @\
      !mtag @\
      call ESMF_AttributeGet(mname, count, & @\
                             convention=nestconv, purpose=nestpurp, & @\
                             attcountflag=ESMF_ATTGETCOUNT_ATTRIBUTE, & @\
                             attnestflag=ESMF_ATTNEST_ON, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Test for getting the count of Attributes in a ", & @\
                     "nested Attpack with ATTNEST_ON, count = ", count @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. count.eq.21), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      ! Get all Attributes in an AttPack object by index on mobj Test @\
      !mtag @\
      do i = 1, count @\
        call ESMF_AttributeGet(mname, attributeIndex=i, name=name, & @\
                               convention=nestconv, purpose=nestpurp, & @\
                               attnestflag=ESMF_ATTNEST_ON, rc=rc) @\
        if (rc /= ESMF_SUCCESS) continue @\
      enddo @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Get all Attributes in an AttPack object by index with ATTNEST_ON Test", & @\
                     ", count = ", count, & @\
                     ", convention = ", trim(nestconv), & @\
                     ", purpose = ", trim(nestpurp) @\
      call ESMF_Test((rc==ESMF_SUCCESS), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      ! Get the count of an AttPack object on mobj Test @\
      count = -5 @\
      !mtag @\
      call ESMF_AttributeGet(mname, attributeIndex=12, name=name, & @\
                             convention=nestconv, purpose=nestpurp, & @\
                             attnestflag=ESMF_ATTNEST_OFF, rc=rc) @\
      write(failMsg, *) "Did not return ESMC_RC_NOT_FOUND, rc = ", rc @\
      write(name, *) "Test for getting an Attribute in a nested Attpack by ", & @\
                     " index too large with ATTNESTFLAG_OFF" @\
      call ESMF_Test((rc==ESMC_RC_NOT_FOUND), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      ! Get the count of an AttPack object on mobj Test @\
      count = -5 @\
      !mtag @\
      call ESMF_AttributeGet(mname, attributeIndex=12, name=attrname, & @\
                             convention=nestconv, purpose=nestpurp, & @\
                             attnestflag=ESMF_ATTNEST_ON, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS, rc = ", rc @\
      write(name, *) "Test for getting an Attribute in a nested Attpack by ", & @\
                     " index too large with ATTNESTFLAG_ON" @\
      call ESMF_Test((rc==ESMF_SUCCESS), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
    !------------------------------------------------------------------------- @\
    !  Attribute package - custom with removal and defaults@\
    !------------------------------------------------------------------------- @\
      conv = "customconvention2" @\
      purp = "custompurpose2" @\
      attpackList(1) = "Custom1" @\
      attpackList(2) = "Custom2" @\
      attpackList(3) = "Custom3" @\
       @\
      !mtag @\
      ! Create a custom Attribute package on mobj Test @\
      call ESMF_AttributeAdd(mname, convention=conv, & @\
        purpose=purp, attrList=attpackList(1:3), rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Creating a custom Attribute package on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
    !------------------------------------------------------------------------- @\
    !  Get an Attribute which was not set from an Attribute package @\
    !------------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get an ESMF_I4 Attribute from mobj Test @\
      call ESMF_AttributeGet(mname, name="NotHere", value=outI4, & @\
        convention=conv, purpose=purp, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_RC_ATTR_NOTSET" @\
      write(name, *) "Getting a nonexistent Attribute from ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_RC_ATTR_NOTSET), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      attrname = "Custom1" @\
      !mtag @\
      ! Get a char Attribute in an Attribute package on mobj Test @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting an unset char Attribute in an Attribute package with defaultValue on ", mobj, " Test" @\
      call ESMF_AttributeGet(mname, name=attrname, & @\
        value=outChar, defaultValue="TryThisAsDefault", & @\
        convention=conv, purpose=purp, rc=rc) @\
      call ESMF_Test((rc==ESMF_SUCCESS), & @\
        name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
@\
      !mtag @\
      ! Set an empty string Attribute in an Attribute package on mobj Test @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an Attribute in an Attribute package to empty string on ", mobj, " Test" @\
      call ESMF_AttributeSet(mname, name=attrname, value="", & @\
        convention=conv, purpose=purp, rc=rc) @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
@\
      attrvalue = "m/s" @\
@\
      !mtag @\
      ! Set an Attribute in an Attribute package on mobj Test @\
      call ESMF_AttributeSet(mname, name=attrname, value=attrvalue, & @\
        convention=conv, purpose=purp, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting an Attribute in an Attribute package on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      attrname = "Custom2" @\
 @\
      !mtag @\
      ! Set a char list Attribute in an Attribute package on mobj Test @\
      call ESMF_AttributeSet(mname, name=attrname, & @\
        valueList=attpackList(1:3), convention=conv, purpose=purp, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Setting a char list Attribute in an Attribute package on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Get a char list Attribute in an Attribute package on mobj Test @\
      call ESMF_AttributeGet(mname, name=attrname, & @\
        valueList=attpackListOut3, convention=conv, purpose=purp, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a char list Attribute in an Attribute package on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. all (attpackList(1:3) == attpackListOut3), & @\
        name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Remove an Attribute in an Attribute package on mobj Test @\
      call ESMF_AttributeRemove(mname, name=attrname, convention=conv, purpose=purp, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removeing an Attribute in an Attribute package on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      attpackDfltList(1) = "Custom4" @\
      attpackDfltList(2) = "Custom5" @\
      attpackDfltList(3) = "Custom6" @\
      !mtag @\
      ! Get a char list default Attribute in an Attribute package on mobj Test @\
      call ESMF_AttributeGet(mname, name=attrname, & @\
        valueList=attpackListOut2, defaultvalueList=attpackDfltList, & @\
        convention=conv, purpose=purp, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Getting a default Attribute character list in an Attribute package on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS) .and. all (attpackListOut2 == attpackDfltList), & @\
        name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Test for the presence of an AttPack object on mobj @\
      call ESMF_AttributeGet(mname, name="NotHere", value=outI4, & @\
        attpack=attpack, isPresent=isPresent, rc=rc) @\
      write(failMsg, *) "Did not return isPresent=False" @\
      write(name, *) "Test for the presence of an AttPack object on mobj" @\
      call ESMF_Test((rc==ESMF_SUCCESS .and. isPresent.eqv..false.), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Remove the entire Attribute package from mobj Test @\
      call ESMF_AttributeRemove(mname, convention=conv, purpose=purp, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing the entire Attribute package from ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      !mtag @\
      ! Remove the entire Attribute package from mobj Test @\
      call ESMF_AttributeRemove(mname, attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Removing the entire Attribute package from ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
^endif @\
! < end macro - do not edit directly >  @\
!------------------------------------------------------------------------------

#define AttPackStandardTestMacro(mname, mobj, mconv, mpurp, mtag) \
!---------------------------------------------------------------------------- @\
! <This section created by macro - do not edit directly> @\
 @\
^ifdef ESMF_TESTEXHAUSTIVE @\
      conv = mconv @\
      purp = mpurp @\
 @\
      !mtag @\
      ! Create a standard Attribute package on mobj Test @\
      call ESMF_AttributeAdd(mname, conv, purp, attpack=attpack, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Creating a standard Attribute package on ", mobj, " Test" @\
      call ESMF_Test((rc==ESMF_SUCCESS), name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      ! Get the count of an AttPack object on mobj Test @\
      count = -5 @\
      !mtag @\
      call ESMF_AttributeGet(mname, count, & @\
                             convention=conv, purpose=purp, & @\
                             attcountflag=ESMF_ATTGETCOUNT_ATTRIBUTE, & @\
                             attnestflag=ESMF_ATTNEST_ON, rc=rc) @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Test for getting the count of Attributes in a ", & @\
                     "nested Attpack, count = ", count @\
      call ESMF_Test((rc==ESMF_SUCCESS), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
      ! Get all Attributes in an AttPack object by index on mobj Test @\
      !mtag @\
      do i = 1, count @\
        call ESMF_AttributeGet(mname, attributeIndex=i, name=name, & @\
                               convention=conv, purpose=purp, & @\
                               isPresent=isPresent, rc=rc) @\
        if (rc /= ESMF_SUCCESS) continue @\
      enddo @\
      write(failMsg, *) "Did not return ESMF_SUCCESS" @\
      write(name, *) "Get all Attributes in an AttPack object by index Test", & @\
                     ", count = ", count, & @\
                     ", convention = ", trim(conv), & @\
                     ", purpose = ", trim(purp) @\
      call ESMF_Test((rc==ESMF_SUCCESS), & @\
                      name, failMsg, result, ESMF_SRCLINE) @\
      !---------------------------------------------------------------------- @\
 @\
^endif @\
! < end macro - do not edit directly >  @\
!------------------------------------------------------------------------------
