! $Id$
!
! Earth System Modeling Framework
! Copyright (c) 2002-2025, University Corporation for Atmospheric Research, 
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics 
! Laboratory, University of Michigan, National Centers for Environmental 
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory, 
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
^define ESMF_FILENAME "ESMF_StateGet.F90"
!
! ESMF StateGet module
module ESMF_StateGetMod
!
!==============================================================================
!
! This file contains the TKR overloaded StateGetDataPointer() methods.
!
!------------------------------------------------------------------------------
! INCLUDES
! < ignore blank lines below.  they are created by the files which
!   define various macros. >
^include "ESMF.h"
#include "ESMF_TypeKindRankMacros.hcppF90"

!------------------------------------------------------------------------------
! !USES:
  use ESMF_UtilTypesMod     ! ESMF utility types
  use ESMF_InitMacrosMod    ! ESMF initializer macros
  use ESMF_BaseMod          ! ESMF base class
  use ESMF_LogErrMod        ! ESMF error handling
  use ESMF_LocalArrayMod
  use ESMF_ArrayMod
  use ESMF_FieldMod
  use ESMF_FieldBundleMod
  use ESMF_StateMod
  
  implicit none

!------------------------------------------------------------------------------
! !PRIVATE TYPES:
  private

!------------------------------------------------------------------------------
! !PUBLIC MEMBER FUNCTIONS:

  public ESMF_StateGetDataPointer
 
!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
  character(*), parameter, private :: version = &
    '$Id$'

!==============================================================================
! 
! INTERFACE BLOCKS
!
!==============================================================================

!------------------------------------------------------------------------------

!BOPI
! !IROUTINE: ESMF_StateGetDataPointer -- Get an F90 pointer to the data contents

! !INTERFACE:
  interface ESMF_StateGetDataPointer

! !PRIVATE MEMBER FUNCTIONS:
!
    TypeKindRankInterfaceMacro(StateGetDataPointer)

! !DESCRIPTION: 
! This interface provides a single entry point for the various 
!  types of {\tt ESMF\_StateGetDataPointer} subroutines.   
!  
!EOPI
  end interface


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

contains

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!------------------------------------------------------------------------------
!------------------------------------------------------------------------------


#define StateGetDataPointerDoc() \
!------------------------------------------------------------------------------ @\
!BOP @\
! !IROUTINE: ESMF_StateGetDataPointer - Retrieve Fortran pointer directly from a State @\
! @\
! !INTERFACE: @\
!   ! Private name; call using ESMF_StateGetDataPointer() @\
!   subroutine ESMF_StateGetDataPointer<rank><type><kind>(state, itemName, @\
!                                 dataPointer, datacopyflag, nestedStateName, rc) @\
! @\
! !ARGUMENTS: @\
!      type(ESMF_State), intent(in) :: state @\
!      character(len=*), intent(in) :: itemName @\
!      <type> (ESMF_KIND_<kind>), dimension(<rank>), pointer :: dataPointer @\
!      type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag @\
!      character(len=*), intent(in), optional :: nestedStateName @\
!      integer, intent(out), optional :: rc   @\
! @\
! @\
! !STATUS: @\
! \begin{itemize} @\
! \item\apiStatusCompatibleVersion{5.2.0r} @\
! \end{itemize} @\
! @\
! !DESCRIPTION: @\
! Retrieves data from a state, returning a direct Fortran pointer to @\
! the data array.  @\
! Valid type/kind/rank combinations supported by the @\
! framework are: ranks 1 to 7, type real of kind *4 or *8, @\
! and type integer of kind *1, *2, *4, or *8. @\
! @\
! The arguments are: @\
!  \begin{description} @\
!  \item[state] @\
!   The {\tt ESMF\_State} to query. @\
!  \item[itemName] @\
!   The name of the FieldBundle, Field, or Array to return data from. @\
!  \item[dataPointer] @\
!   An unassociated Fortran pointer of the proper Type, Kind, and Rank as the data @\
!   in the State.  When this call returns successfully, the pointer will now reference @\
!   the data in the State.  This is either a reference or a copy, depending on the @\
!   setting of the following argument.  The default is to return a reference. @\
!  \item[{[datacopyflag]}] @\
!   Defaults to {\tt ESMF\_DATACOPY\_REFERENCE}.  If set to {\tt ESMF\_DATACOPY\_VALUE}, a separate @\
!   copy of the data will be made and the pointer will point at the copy. @\
!  \item[{[nestedStateName]}] @\
!   Optional.  If multiple states are present, a specific state name must be given. @\
!  \item[{[fieldName]}] @\
!   Optional.  If {\tt itemName} refers to a fieldbundle then the name of the field @\
!   in the fieldbundle must also be given. @\
!  \item[{[rc]}] @\
!    Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
!  \end{description} @\
! @\
!EOP @\
!---------------------------------------------------------------------------- @\

#define StateGetDataPointerMacro(mname, mtypekind, mrank, mdim, mlen, mrng, mloc) \
!------------------------------------------------------------------------------ @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_StateGetDataPointer" @\
      subroutine ESMF_StateGetDataPointer##mrank##D##mtypekind(state, & @\
                     itemName, dataPointer, keywordEnforcer, datacopyflag, & @\
                     nestedStateName, fieldName, rc) @\
 @\
      type(ESMF_State), intent(in) :: state @\
      character(len=*), intent(in) :: itemName @\
      mname (ESMF_KIND_##mtypekind), dimension(mdim), pointer :: dataPointer @\
      type(ESMF_KeywordEnforcer),      optional :: keywordEnforcer ! must use keywords for the below @\
      type(ESMF_DataCopy_Flag), intent(in), optional :: datacopyflag @\
      character(len=*), intent(in), optional :: nestedStateName @\
      character(len=*), intent(in), optional :: fieldName @\
      integer, intent(out), optional :: rc   @\
 @\
        ! Local variables @\
        !!type (ESMF_FieldBundle) :: fieldbundle      ! fieldbundle object @\
        type (ESMF_Field) :: field          ! field object @\
        type(ESMF_Array) :: array           ! array object @\
        type(ESMF_State) :: top     @\
        integer :: status                   ! local error status @\
        logical :: rcpresent                ! did user specify rc? @\
        logical :: found @\
        logical :: trueval @\
        character(len=ESMF_MAXSTR) :: errmsg @\
        type(ESMF_StateItem), pointer :: dataitem @\
 @\
        ! Initialize return code; assume failure until success is certain @\
        status = ESMF_RC_NOT_IMPL @\
        rcpresent = .FALSE. @\
        ! TODO:FIELDINTEGRATION Resolve problem with array%this init to NULL @\
        ! array%this = ESMF_NULL_POINTER @\
 @\
        if (present(rc)) then @\
          rcpresent = .TRUE. @\
          rc = ESMF_RC_NOT_IMPL @\
        endif @\
 @\
        ! set temporary true val to work around Cray preprocessor problem@\
        trueval = .TRUE.@\
 @\
        ! check input variables @\
        ESMF_INIT_CHECK_DEEP(ESMF_StateGetInit,state,rc) @\
 @\
 @\
        ! Test to see if array already associated, and fail if so. @\
        if (associated(dataPointer)) then @\
          if (ESMF_LogFoundError(ESMF_RC_ARG_BAD, & @\
                              "Data Pointer cannot already be associated", & @\
                               ESMF_CONTEXT, rc)) return @\
        endif @\
 @\
 @\
        ! If there is a nested state name then use that as the state @\
         if (present(nestedStateName)) then          @\
            found = ESMF_StateClassFindData(state%statep, dataname=nestedStateName, & @\
                                      expected=trueval, dataitem=dataitem, rc=status)  @\
            if (ESMF_LogFoundError(status, & @\
                                    ESMF_ERR_PASSTHRU, & @\
                                    ESMF_CONTEXT, rc)) return @\
            if (.not. found) then                              @\
                write(errmsg, *) "no nested state found named ", trim(nestedStateName) @\
                if (ESMF_LogFoundError(ESMF_RC_ARG_INCOMP, errmsg, &   @\
                                         ESMF_CONTEXT, rc)) return     @\
            endif                                                         @\
                                                                        @\
            if (dataitem%otype .ne. ESMF_STATEITEM_STATE) then            @\
                 write(errmsg,*) trim(nestedStateName), " found but not type State" @\
                 if (ESMF_LogFoundError(ESMF_RC_ARG_INCOMP, errmsg, &     @\
                                          ESMF_CONTEXT, rc)) return       @\
             endif                                                           @\
                                                                          @\
             top%statep => dataitem%datap%spp                                @\
        else                                                                @\
             top%statep => state%statep                                      @\
        endif                                                               @\
                                                                          @\
        ! Find object associated with name @\
        found=ESMF_StateClassFindData(top%statep, dataname=itemName, & @\
                      expected=trueval, dataitem=dataitem, rc=status) @\
        if (ESMF_LogFoundError(status, & @\
                                  ESMF_ERR_PASSTHRU, & @\
                                  ESMF_CONTEXT, rc)) return @\
        if (.not. found) then   @\
           write(errmsg, *) "no state item found named ", trim(itemName) @\
           if (ESMF_LogFoundError(ESMF_RC_ARG_INCOMP, errmsg, &       @\
                                          ESMF_CONTEXT, rc)) return         @\
        endif                                                             @\
@\
@\
        ! Get data based on type @\
        if (dataitem%otype .eq. ESMF_STATEITEM_BUNDLE) then @\
           ! make sure we have a field name @\
           if (.not. present(fieldName)) then @\
              if (ESMF_LogFoundError(ESMF_RC_ARG_INCOMP, & @\
                  "When retrieving fieldbundle data pointer need to provide fieldName", & @\
                  ESMF_CONTEXT, rc)) return    @\
           endif @\
@\
           ! get the fieldbundle data @\
! TODO:FIELDINTEGRATION uncomment the next line, and erase the next after that @\
!           call ESMF_FieldBundleGetDataPointer(dataitem%datap%bp, & @\
!                 fieldName, dataPointer, datacopyflag, status) @\
           status=ESMF_RC_NOT_IMPL @\
           if (ESMF_LogFoundError(status, & @\
                                  ESMF_ERR_PASSTHRU, & @\
                                  ESMF_CONTEXT, rc)) return @\
        else if (dataitem%otype .eq. ESMF_STATEITEM_FIELD) then @\
! TODO:FIELDINTEGRATION uncomment the next line, and erase the next after that @\
!         call ESMF_FieldGetDataPointer(dataitem%datap%fp, dataPointer, datacopyflag, status)@\
           status=ESMF_RC_NOT_IMPL @\
         if (ESMF_LogFoundError(status, & @\
                                  ESMF_ERR_PASSTHRU, & @\
                                  ESMF_CONTEXT, rc)) return @\
        else if (dataitem%otype .eq. ESMF_STATEITEM_ARRAY) then @\
          ! data copy not currently supported by array                @\
          ! TODO: remove this when array supports ESMF_DATACOPY_VALUE      @\
          if (present(datacopyflag)) then   @\
             if (datacopyflag .ne. ESMF_DATACOPY_REFERENCE) then                        @\
                if (ESMF_LogFoundError(ESMF_RC_ARG_INCOMP, &                       @\
                    " must currently use ESMF_DATACOPY_REFERENCE when getting data from an Array",& @\
                                      ESMF_CONTEXT, rc)) return              @\
             endif   @\
          endif   @\
                            @\
          ! get pointer     @\
          call ESMF_ArrayGet(dataitem%datap%ap, dataPointer, rc=status) @\
          if (ESMF_LogFoundError(status, & @\
                                  ESMF_ERR_PASSTHRU, & @\
                                  ESMF_CONTEXT, rc)) return @\
        else  @\
           if (ESMF_LogFoundError(ESMF_RC_ARG_INCOMP, &                       @\
                         " item not of a valid type from which to retrieve a data pointer" , &  @\
                                          ESMF_CONTEXT, rc)) return              @\
        endif @\
 @\
        if (rcpresent) rc = status @\
 @\
        end subroutine ESMF_StateGetDataPointer##mrank##D##mtypekind   @\
 @\
!------------------------------------------------------------------------------ @\

TypeKindRankDeclarationMacro(StateGetDataPointer)


end module ESMF_StateGetMod
